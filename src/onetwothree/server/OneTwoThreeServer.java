/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package onetwothree.server;

import com.google.gson.internal.StringMap;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import onetwothreeMisc.ConstantValue;
import static onetwothreeMisc.ConstantValue.*;
import onetwothreeMisc.MessageHandler;

/**
 *
 * @author BITVN12
 */
public class OneTwoThreeServer extends javax.swing.JFrame {

    private static ServerSocket listener;
    private static DefaultListModel<String> listModel = new DefaultListModel<>();
    private static ArrayList<Authentication> clientList;
    private static Map<String, Authentication> clients
            = new HashMap<>();
    private static Map<String, Game> games
            = new HashMap<>();
    private static int numClient = 0;
    private static OneTwoThreeServer server;

    /**
     * Creates new form OneTwoThreeServer
     */
    public OneTwoThreeServer() {
        initComponents();
        clientList = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        areaLog = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        listUser = new javax.swing.JList<>();
        btnStopServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        areaLog.setEditable(false);
        areaLog.setColumns(20);
        areaLog.setRows(5);
        jScrollPane1.setViewportView(areaLog);

        listUser.setBorder(javax.swing.BorderFactory.createTitledBorder("Online User List"));
        listUser.setFocusable(false);
        jScrollPane2.setViewportView(listUser);

        btnStopServer.setBackground(new java.awt.Color(204, 0, 0));
        btnStopServer.setForeground(new java.awt.Color(255, 255, 255));
        btnStopServer.setText("Stop Server!");
        btnStopServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnStopServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 532, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 374, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addComponent(btnStopServer)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void setAreaLog(String log) {
        areaLog.append(log + "\n");
    }

    private void btnStopServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopServerActionPerformed
        try {
            areaLog.append("Server is stopped!");
            listener.close();
        } catch (IOException ex) {
            Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStopServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OneTwoThreeServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OneTwoThreeServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OneTwoThreeServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OneTwoThreeServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        listener = new ServerSocket(8901);
        System.out.println("Keo Bua Bao Server is Running");

//                JSONObject jsonObj = new JSONObject(a);
//                JSONObject content = jsonObj.getJSONObject("content");
//                String pass = content.getString("username");
//                System.out.println(pass);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                server = new OneTwoThreeServer();
                server.setVisible(true);
                server.listUser.setModel(listModel);
            }
        });

        try {
            while (true) {
                new Authentication(listener.accept()).start();
            }
        } finally {
            listener.close();
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaLog;
    private javax.swing.JButton btnStopServer;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listUser;
    // End of variables declaration//GEN-END:variables

    private static class Authentication extends Thread {

        private final Socket socket;
        private int numOrder;
        private static BufferedReader in;
        private static PrintWriter out;
        private static String currentUsername;
        private static Game currentGame;

        public Authentication(Socket _socket) {
            this.socket = _socket;
//            System.out.println(socket.toString());
            try {
                this.in = new BufferedReader(
                        new InputStreamReader(socket.getInputStream()));
                this.out = new PrintWriter(socket.getOutputStream(), true);
            } catch (IOException ex) {
                Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }
        
        public String getCurrentUsername(){
            return currentUsername;
        }
        
        public BufferedReader getIn(){
            return this.in;
        }

        public void run() {
            try {
                
                while (true) {
                    String input = in.readLine();
                    MessageHandler message = new MessageHandler(input);
                    if (message.isMessage()) {
                        MessageHandler responseMessage = message.handler();
                        if (responseMessage.isMessage()
                                && responseMessage.getHeader().equals(ConstantValue.SERVER_LOGOUT_SUCCESS)) {
                            String username = responseMessage.getTo();
                            listModel.remove(numOrder);
                            server.setAreaLog("User name " + username + " has logged out.");
                            clients.remove(username);
//                            out.close();
//                            in.close();
                            socket.close();
                            announNewOuter(responseMessage.getContent());
                            break;
                        }
                        if (responseMessage.isMessage()
                                && !responseMessage.getHeader().equals(ConstantValue.PEER_CONNECT_WAR_SUCCESS)
                                && !responseMessage.getHeader().equals(ConstantValue.PEER_GAME_SHOW_CHOICE)) {
                            out.println(responseMessage.toJSON());
                        }
                        
                        if (responseMessage.isMessage()
                                && responseMessage.getHeader().equals(ConstantValue.PEER_GAME_SHOW_CHOICE)) {
                            System.out.println("respones here " + responseMessage.toJSON());
                        }
                        if (responseMessage.isMessage()
                                && responseMessage.getHeader().equals(ConstantValue.SERVER_WELCOME)) {
                            String username = responseMessage.getTo();
                            listModel.addElement(username + "(online)");
                            numOrder = listModel.getSize() - 1;
                            server.setAreaLog("User name " + username + " has logged in.");
                            announNewComer(username);
                            clients.put(username, this);
                            currentUsername = username;
                        }
                        if (responseMessage.isMessage()
                                && responseMessage.getHeader().equals(ConstantValue.SERVER_CONNECT_WAR_SUCCESS)) {
                            String otherUsername = responseMessage.getContent().get("otherUsername").toString();
                            String username = responseMessage.getTo();
                            Authentication player2 = clients.get(otherUsername);
                            if(player2 != null){
                                MessageHandler askWarMessage;
                                StringMap<String> askWarContent = new StringMap<>();
                                askWarContent.put("otherUsername", username);
                                askWarMessage = new MessageHandler(PEER_CONNECT_WAR, askWarContent, username, otherUsername);
                                player2.sendMessage(askWarMessage);
                                currentGame = new Game(this, player2);
                            }
                        }
                        if (responseMessage.isMessage()
                                && responseMessage.getHeader().equals(ConstantValue.PEER_CONNECT_WAR_SUCCESS)) {
                            String otherUsername = responseMessage.getTo();
                            String username = responseMessage.getFrom();
                            Authentication player1 = clients.get(otherUsername);
                            if(player1 != null){
                                MessageHandler askWarMessage;
                                askWarMessage = new MessageHandler(PEER_CONNECT_WAR_SUCCESS, responseMessage.getContent(), username, otherUsername);
                                player1.sendMessage(askWarMessage);
                                currentGame = player1.getCurrentGame();
                                Thread threadGame = new Thread() {
                                    public void run(){
                                        currentGame.handleMessageInGame();
                                    }
                                };
                                threadGame.start();
                                currentGame.doGame();
                            }
                        }
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        private void announNewComer(String username) {
            clients.forEach((client, handleSocket) -> {
                System.out.println("announNewComer username " + username);
                System.out.println("announNewComer client " + client);
                System.out.println("announNewComer socket " + handleSocket.socket.toString());
                StringMap<String> responseContent = new StringMap<>();
                responseContent.put(username, "online");
                MessageHandler message = new MessageHandler(SERVER_NEWCOMER, responseContent, "SERVER", client);
                try {
                    handleSocket.sendMessage(message);
                } catch (Exception ex) {
                    Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            });

        }

        private void announNewOuter(StringMap<String> responseContent) {

            clients.forEach((username, handleSocket) -> {
                System.out.println("announNewOuter username" + username);
                MessageHandler message = new MessageHandler(SERVER_NEWOUTER, responseContent, "SERVER", username);
                try {
                    handleSocket.sendMessage(message);
                } catch (Exception ex) {
                    Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
        }

        public void sendMessage(MessageHandler message) {
            if (message.isMessage()) {
                try {
                    PrintWriter output = new PrintWriter(socket.getOutputStream(), true);
                    output.println(message.toJSON());
                } catch (Exception ex) {
                    Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        public String getInputMessage() {
        try {
            return this.in.readLine();
        } catch (IOException ex) {
            Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
        }
        return "abcabc";
    }
        
        /**
         * @return the currentGame
         */
        public static Game getCurrentGame() {
            return currentGame;
        }

    }

    private static class Game{
        private Authentication player1;
        private Authentication player2;
        private static String player1Choice = "";
        private static String player2Choice = "";
        private static Authentication winner;
        private static Authentication loser;
        private static String result;
        
        private String status;
        private static int countdown = COUNTDOWN_TOTAL;
        private static TimerTask task;
        private static Timer timer;
        
        public Game(Authentication player1, Authentication player2){
            this.player1 = player1;
            this.player2 = player2;
//            this.in1     = player1.getIn();
//            this.in2     = player2.getIn();
            status = "waiting";
        }
        
        public Authentication getPlayer1() {
            return this.player1;
        }
        
        public Authentication getPlayer2() {
            return this.player2;
        }
        
        public String getStatus(){
            return this.status;
        }
        
        public void setStatus(String _status){
            this.status = _status;
        }

        public void doGame(){
            try {
                task = new TimerTask() {
                    @Override
                    public void run() {
                        
                        try {
                            StringMap<String> responseContent = new StringMap<>();
                            responseContent.put( "count_down", String.valueOf(setCountDown() ) );
                            MessageHandler mess1 = new MessageHandler(PEER_GAME_COUNT_DOWN, responseContent, "SERVER", player1.getCurrentUsername());
                            MessageHandler mess2 = new MessageHandler(PEER_GAME_COUNT_DOWN, responseContent, "SERVER", player2.getCurrentUsername());
                            
                            player1.sendMessage(mess1);
                            player2.sendMessage(mess2);
                            System.out.println(mess1.toJSON());
                            System.out.println(mess2.toJSON());
                        } catch (Exception ex) {
                            Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                };
                timer = new Timer();
                long delay = DELAY;
                long intevalPeriod = INTERVAL_TIME;
                // schedules the task to be run in an interval
                timer.scheduleAtFixedRate(task, delay, intevalPeriod);
                
//                task.cancel();
                
                Thread.sleep(SLEEP);
                
                StringMap<String> responseContent = new StringMap<>();
                responseContent.put( "message", "show_choice" );
                MessageHandler messChoice1 = new MessageHandler(PEER_GAME_SHOW_CHOICE, responseContent, "SERVER", player1.getCurrentUsername());
                MessageHandler messChoice2 = new MessageHandler(PEER_GAME_SHOW_CHOICE, responseContent, "SERVER", player2.getCurrentUsername());
                
                player1.sendMessage(messChoice1);
                player2.sendMessage(messChoice2);
                
                Thread.sleep(5000);
                
                StringMap<String> resultContent = new StringMap<>();
                resultContent.put( "result", calculateResult() );
                MessageHandler messShowResult1 = new MessageHandler(PEER_GAME_SHOW_RESULT, resultContent, "SERVER", player1.getCurrentUsername());
                MessageHandler messShowResult2 = new MessageHandler(PEER_GAME_SHOW_RESULT, resultContent, "SERVER", player2.getCurrentUsername());
                
                player1.sendMessage(messShowResult1);
                player2.sendMessage(messShowResult2);
                
                String out1 = messShowResult1.toJSON();
                String out2 = messShowResult2.toJSON();
                
                System.out.println("result 1 " + out1);
                System.out.println("result 2 " + out2);
            } catch (InterruptedException ex) {
                Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
            } 
            
        }
        
        public void handleMessageInGame() {
            try {
                status = "in-game";
                System.out.println("asdasdasdasd");
                while (true) {
                    String input1 = player1.getInputMessage();
                    String input2 = player2.getInputMessage();
                    System.out.println("message game choice " + input1);
                    System.out.println("message game choice " + input2);
                    MessageHandler message1 = new MessageHandler(input1);
                    MessageHandler message2 = new MessageHandler(input2);
                    
                    handleInputStream(message1);
                    handleInputStream(message2);
                    System.out.println("player1 choice " + message1.toJSON());
                    System.out.println("player2 choice " + message2.toJSON());
                }
            } catch (IOException ex) {
                Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        private void handleInputStream(MessageHandler message){
            if (message.isMessage()) {
                try {
                    MessageHandler responseMessage = message.handleGame();
                    if (responseMessage.isMessage()
                            && responseMessage.getHeader().equals(PEER_GAME_SHOW_CHOICE)) {
                        String username = responseMessage.getFrom();
                        if( username.equals ( player1.getCurrentUsername() ) ){
                            player1Choice = (String)responseMessage.getContent().get("choice");
                            System.out.println(player1Choice);
                        } else if ( username.equals ( player2.getCurrentUsername() ) ) {
                            player2Choice = (String)responseMessage.getContent().get("choice");
                            System.out.println(player2Choice);
                        }
                    }
                } catch (Exception ex) {
                    Logger.getLogger(OneTwoThreeServer.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        private String calculateResult(){
            result = "";
            if((player1Choice.equals(player2Choice)) ) {
                result = "draw";
            }
            // catch cases player1 win
            if(  
                    (!player1Choice.equals("") && player2Choice.equals("")) ||
                    (player1Choice.equals(KEO) && player2Choice.equals(BAO)) || 
                    (player1Choice.equals(BAO) && player2Choice.equals(BUA)) ||
                    (player1Choice.equals(BUA) && player2Choice.equals(KEO)) 
                    
              ) {
                result = player1.getCurrentUsername();
            }
            // catch cases player2 win
            if(  
                    (!player2Choice.equals("") && player1Choice.equals("")) ||
                    (player2Choice.equals(KEO) && player1Choice.equals(BAO) ) || 
                    (player2Choice.equals(BAO) && player1Choice.equals(BUA) ) ||
                    (player2Choice.equals(BUA) && player1Choice.equals(KEO) )
                    
              ) {
                result = player2.getCurrentUsername();
            }
            return result;
        }
        private static final int setCountDown(){
            if (countdown == 1)
                timer.cancel();
                
            return --countdown;
        }
    }
}
